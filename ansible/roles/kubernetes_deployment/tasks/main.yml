---

- name: copy default network policy on master
  ansible.builtin.copy:
    src: default_policy.yml
    dest: /tmp/default-network-policy.yml
  tags: deployment
  become: True

- name: apply default network policy to cluster
  ansible.builtin.command: calicoctl apply -f /tmp/default-network-policy.yml
  tags:
    - deployment
    - default-policy
    - network

- name: delete policy configuration file
  ansible.builtin.file:
    path: /tmp/default-network-policy.yml
    state: absent
  tags: deployment
  become: True

- name: create namespaces configuration directory
  ansible.builtin.file:
    path: /tmp/k8s-configurations/namespaces
    state: directory
    owner: svcansible
    group: ansible
  tags: deployment
  become: True

- name: create services configuration directory
  ansible.builtin.file:
    path: /tmp/k8s-configurations/deployments
    state: directory
    owner: svcansible
    group: ansible
  tags: deployment
  become: True

- name: create policies configuration directory
  ansible.builtin.file:
    path: /tmp/k8s-configurations/policies
    state: directory
    owner: svcansible
    group: ansible
  tags: deployment
  become: True

- name: create endpoints configuration files
  ansible.builtin.template:
    src: endpoint.j2
    dest: /tmp/endpoint.yml
  tags: deployment

- name: create endpoints on cluster
  ansible.builtin.command: calicoctl apply -f /tmp/endpoint.yml
  tags:
    - deployment
    - network

- name: delete endpoint configuration files
  ansible.builtin.file:
    path: /tmp/endpoint.yml
    state: absent
  tags: deployment

- name: create namespaces configuration files
  ansible.builtin.template:
    src: namespace.j2
    dest: "/tmp/k8s-configurations/namespaces/{{ item.namespace }}.yml"
  loop: "{{ kubernetes_deployment_conf }}"
  loop_control:
    label: "{{ item.namespace }}"
  tags: deployment

- name: create services configuration files
  ansible.builtin.template:
    src: application.j2
    dest: "/tmp/k8s-configurations/deployments/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  tags: deployment

- name: create policies configuration files
  ansible.builtin.template:
    src: network_policy.j2
    dest: "/tmp/k8s-configurations/policies/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  when: item.1.rules is defined or (item.1.exposed is defined and item.1.exposed)
  tags: deployment

- name: create directories configuration file
  ansible.builtin.template:
    src: _vars.j2
    dest: /tmp/templated_directories.json
  tags: deployment

- name: read variable from directories configuration file
  ansible.builtin.shell: tac /tmp/templated_directories.json | sed '2 s/},/}/' | tac
  args:
    executable: /bin/bash
  changed_when: False
  register: _templated_directories
  tags: deployment

- name: delete directories configuration files
  ansible.builtin.file:
    path: /tmp/templated_directories.json
    state: absent
  tags: deployment
  become: True

- name: create data directory for volumes
  ansible.builtin.file:
    path: "/data/{{ item.namespace }}-{{ item.app }}/{{ item.volume }}"
    state: directory
    recurse: True
  loop: "{{ _templated_directories.stdout | from_json }}"
  loop_control:
    label: "{{ item.namespace }}-{{ item.app }}/{{ item.volume }}"
  when: item.delete == "false"
  tags: deployment

- name: create namespaces on cluster
  ansible.builtin.command: "kubectl apply -f /tmp/k8s-configurations/namespaces/{{ item.namespace }}.yml"
  loop: "{{ kubernetes_deployment_conf }}"
  loop_control:
    label: "{{ item.namespace }}"
  when: item.delete | default(False) != True
  tags: deployment

- name: create services on cluster
  ansible.builtin.command: "kubectl apply -f /tmp/k8s-configurations/deployments/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  when: item.0.delete | default(False) != True and item.1.delete | default(False) != True
  tags: deployment

- name: apply services network policies
  ansible.builtin.command: "calicoctl apply -f /tmp/k8s-configurations/policies/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  when: item.0.delete | default(False) != True and item.1.delete | default(False) != True
  tags:
    - deployment
    - network

- name: delete services network policies
  ansible.builtin.command: "calicoctl delete --skip-not-exists -f /tmp/k8s-configurations/policies/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  when: item.0.delete | default(False) or item.1.delete | default(False)
  tags:
    - deployment
    - network

- name: delete services on cluster
  ansible.builtin.command: "kubectl delete --ignore-not-found -f /tmp/k8s-configurations/deployments/{{ item.0.namespace }}-{{ item.1.name }}.yml"
  loop: "{{ kubernetes_deployment_conf | subelements('apps', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.namespace }}-{{ item.1.name }}"
  when: item.1.delete | default(False)
  tags: deployment

- name: delete namespaces on cluster
  ansible.builtin.command: "kubectl delete --ignore-not-found -f /tmp/k8s-configurations/namespaces/{{ item.namespace }}.yml"
  loop: "{{ kubernetes_deployment_conf }}"
  loop_control:
    label: "{{ item.namespace }}"
  when: item.delete | default(False)
  tags: deployment

- name: delete data directory for volumes
  ansible.builtin.file:
    path: "/data/{{ item.namespace }}-{{ item.app }}/{{ item.volume }}"
    state: absent
  loop: "{{ _templated_directories.stdout | from_json }}"
  loop_control:
    label: "{{ item.namespace }}-{{ item.app }}/{{ item.volume }}"
  when: item.delete == "true"
  tags: deployment

- name: delete configuration directory
  ansible.builtin.file:
    path: /tmp/k8s-configurations
    state: absent
  tags: deployment
  become: True
