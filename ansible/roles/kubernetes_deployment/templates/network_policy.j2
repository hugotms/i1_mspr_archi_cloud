{% for container in item.1.containers %}
{% for port in container.ports %}
{% if port.protocol | default('tcp') | upper == 'HTTP' or port.lbPort is defined %}
---
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: {{ item.0.namespace }}-{{ item.1.name }}-{{ container.name | default(item.1.name) }}-{{ port.nodePort }}-exposed-policy
spec:
  selector: has(kubernetes-host)
  preDNAT: true
  applyOnForward: true
  order: 10
  types:
  - Ingress
  ingress:
  - action: Allow
    protocol: {{ (port.protocol | default('tcp') | upper == 'HTTP') | ternary('TCP', port.protocol | default('tcp') | upper) }}
    source:
      nets: [{{ ansible_host.split('.')[0] }}.{{ ansible_host.split('.')[1] }}.0.0/16]
    destination:
      selector: has(kubernetes-host)
      ports:
      - {{ port.nodePort }}
{% if port.lbPort is defined %}
      - {{ port.lbPort }}
{% endif %}
---
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: {{ item.1.name }}-{{ container.name | default(item.1.name) }}-{{ port.nodePort }}-internal-ingress-policy
  namespace: {{ item.0.namespace }}
spec:
  selector: app == '{{ item.1.name }}'
  order: 20
  types:
  - Ingress
  ingress:
  - action: Allow
    protocol: {{ (port.protocol | default('tcp') | upper == 'HTTP') | ternary('TCP', port.protocol | default('tcp') | upper) }}
    source:
      nets: [{{ ansible_host.split('.')[0] }}.{{ ansible_host.split('.')[1] }}.0.0/16]
{% endif %}
{% endfor %}
{% endfor %}
{% if item.1.rules is defined %}
---
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: {{ item.1.name }}-internal-egress-policy
  namespace: {{ item.0.namespace }}
spec:
  selector: app == '{{ item.1.name }}'
  order: 30
  types:
  - Egress
  egress:
{% for egress in item.1.rules %}
  - action: Allow
    protocol: {{ egress.protocol | default('tcp') | upper }}
{% if egress.allowTo is defined %}
    destination:
      selector: app == '{{ egress.allowTo }}'
      ports: [{{ egress.ports }}]
{% endif %}
{% endfor %}
{% for egress in item.1.rules %}
{% if egress.allowTo is defined %}
---
apiVersion: projectcalico.org/v3
kind: NetworkPolicy
metadata:
  name: {{ egress.allowTo }}-internal-ingress-from-{{ item.1.name }}-policy
  namespace: {{ item.0.namespace }}
spec:
  selector: app == '{{ egress.allowTo }}'
  order: 40
  types:
  - Ingress
  ingress:
  - action: Allow
    protocol: {{ egress.protocol | default('tcp') | upper }}
    source:
      selector: app == '{{ item.1.name }}'
    destination:
      ports: [{{ egress.ports }}]
{% endif %}
{% endfor %}
{% endif %}
