# {{ ansible_managed }}

load_module /usr/lib/nginx/modules/ngx_stream_module.so;
user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include /etc/nginx/mime.types;
    include    /etc/nginx/proxy_params;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    server_tokens off;
{% if https_enabled %}
    ssl_certificate /etc/letsencrypt/live/{{ site_fqdn }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ site_fqdn }}/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_session_cache  shared:SSL:10m;
    ssl_session_timeout 10m;
{% endif %}

{% for namespace in kubernetes_deployment_conf | selectattr('apps', 'defined') %}
{% if namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% if app.state | default('present') != 'absent' %}
{% for port in app.containers | selectattr('ports', 'defined') | map(attribute='ports') | flatten | selectattr('nodePort', 'defined') | selectattr('protocol', 'defined') %}
{% if port.protocol | upper == 'HTTP' %}
    upstream {{ namespace.namespace }}_{{ app.name }}_{{ port.nodePort }}_http_backend {
        least_conn;
{% for server in groups['nodes'] %}
        server {{ hostvars[server].ansible_host }}:{{ port.nodePort }};
{% endfor %}
    }

{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

    upstream {{ admin_namespace }}_certbot_http_backend {
        least_conn;
{% for server in groups['nodes'] %}
        server {{ hostvars[server].ansible_host }}:30000;
{% endfor %}
    }

    server {
        listen 80;
        server_name {{ site_fqdn }};

        location / {
            proxy_pass http://{{ admin_namespace }}_certbot_http_backend;
        }
    }

{% for namespace in kubernetes_deployment_conf | selectattr('apps', 'defined') %}
{% if namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% if app.state | default('present') != 'absent' %}
{% for port in app.containers | selectattr('ports', 'defined') | map(attribute='ports') | flatten | selectattr('nodePort', 'defined') | selectattr('protocol', 'defined') %}
{% if port.protocol | upper == 'HTTP' %}
    server {
        listen 80;
{% if port.url is defined %}
        server_name {{ app.name | lower }}-{{ container.name | default(app.name) | lower }}-service.{{ namespace.namespace | lower }}.{{ ansible_domain | lower }} {{ port.url }};
{% else %}
        server_name {{ app.name | lower }}-{{ container.name | default(app.name) | lower }}-service.{{ namespace.namespace | lower }}.{{ ansible_domain | lower }};
{% endif %}
{% if https_enabled %}
        return 301 https://$host$request_uri;
{% else %}
        location / {
            proxy_pass http://{{ namespace.namespace }}_{{ app.name }}_{{ port.nodePort }}_http_backend;
        }
{% endif %}
    }

{% if https_enabled %}
    server {
        listen 443 ssl;
{% if port.url is defined %}
        server_name {{ app.name | lower }}-{{ container.name | default(app.name) | lower }}-service.{{ namespace.namespace | lower }}.{{ ansible_domain | lower }} {{ port.url }};
{% else %}
        server_name {{ app.name | lower }}-{{ container.name | default(app.name) | lower }}-service.{{ namespace.namespace | lower }}.{{ ansible_domain | lower }};
{% endif %}
        location / {
            proxy_pass http://{{ namespace.namespace }}_{{ app.name }}_{{ port.nodePort }}_http_backend;
        }
    }

{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
}

stream {
{% for namespace in kubernetes_deployment_conf | selectattr('apps', 'defined') %}
{% if namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% if app.state | default('present') != 'absent' %}
{% for port in app.containers | selectattr('ports', 'defined') | map(attribute='ports') | flatten | selectattr('nodePort', 'defined') | selectattr('lbPort', 'defined') %}
    upstream {{ namespace.namespace }}_{{ app.name }}_{{ port.nodePort }}_{{ port.protocol | default('tcp') | lower }}_backend {
        least_conn;
{% for server in groups['nodes'] %}
        server {{ hostvars[server].ansible_host }}:{{ port.nodePort }};
{% endfor %}
    }

{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{% for namespace in kubernetes_deployment_conf | selectattr('apps', 'defined') %}
{% if namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% if app.state | default('present') != 'absent' %}
{% for port in app.containers | selectattr('ports', 'defined') | map(attribute='ports') | flatten | selectattr('nodePort', 'defined') | selectattr('lbPort', 'defined') %}
    server {
        listen {{ port.lbPort }}{{ (port.protocol | default('tcp') | upper == 'UDP') | ternary(' udp;', ';')}}
        proxy_pass  {{ namespace.namespace }}_{{ app.name }}_{{ port.nodePort }}_{{ port.protocol | default('tcp') | lower }}_backend;
    }

{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
}
