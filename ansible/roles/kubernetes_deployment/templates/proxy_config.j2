global
    log         127.0.0.1 local2

    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

listen stats 
    bind {{ proxy_floating_ip }}:8181
    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats uri /stats

frontend http_front
    bind {{ proxy_floating_ip }}:80
{% if https_enabled | default(True) %}
    bind {{ proxy_floating_ip }}:443 ssl crt /etc/haproxy/haproxy.pem
{% endif %}

    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend kube-system_certbot_http_backend if letsencrypt-acl

    redirect scheme https unless { ssl_fc }
    use_backend %[req.hdr(host),lower,map(/etc/haproxy/urls.map,be_static)]
    option  forwardfor

backend kube-system_certbot_http_backend
{% for server in groups['nodes'] %}
    server {{ hostvars[server].inventory_hostname | lower }} {{ hostvars[server].ansible_host }}:30000
{% endfor %}

{% for namespace in kubernetes_deployment_conf %}
{% if namespace.apps is defined and namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% for container in app.containers %}
{% if container.ports is defined %}
{% for port in container.ports %}
{% if port.protocol | default('tcp') | upper == 'HTTP' %}
backend {{ namespace.namespace }}_{{ app.name }}_{{ container.name | default(app.name) }}_{{ port.nodePort }}_{{ port.protocol | default('tcp') | lower }}_backend
    balance leastconn
    mode http
{% for server in groups['nodes'] %}
    server {{ hostvars[server].inventory_hostname | lower }} {{ hostvars[server].ansible_host }}:{{ port.nodePort }} check
{% endfor %}

{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}

{% for namespace in kubernetes_deployment_conf %}
{% if namespace.apps is defined and namespace.state | default('present') != 'absent' %}
{% for app in namespace.apps %}
{% for container in app.containers %}
{% if container.ports is defined %}
{% for port in container.ports %}
{% if port.protocol | default('tcp') | upper == 'TCP' and port.lbPort is defined %}
listen {{ namespace.namespace }}_{{ app.name }}_{{ container.name | default(app.name) }}_{{ port.nodePort }}_{{ port.protocol | default('tcp') | lower }}_port
    bind {{ proxy_floating_ip }}:{{ port.lbPort }}
    balance leastconn
    mode tcp
{% for server in groups['nodes'] %}
    server {{ hostvars[server].inventory_hostname | lower }} {{ hostvars[server].ansible_host }}:{{ port.nodePort }} check
{% endfor %}

{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}
